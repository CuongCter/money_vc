"use client"

import { useState, useEffect } from "react"
import { useAuthStore } from "../../store/authStore"
import { useCategoryStore } from "../../store/categoryStore"
import { useNotificationStore } from "../../store/notificationStore"
import { addCategory, updateCategory } from "../../api/categoryService"
import Button from "../ui/Button"
import LoadingSpinner from "../ui/LoadingSpinner"
import { Tag, Palette } from "lucide-react"

const AVAILABLE_ICONS = [
  { key: "coffee", emoji: "‚òï", name: "C√† ph√™" },
  { key: "car", emoji: "üöó", name: "Xe c·ªô" },
  { key: "shopping-bag", emoji: "üõçÔ∏è", name: "Mua s·∫Øm" },
  { key: "film", emoji: "üé¨", name: "Gi·∫£i tr√≠" },
  { key: "wallet", emoji: "üíº", name: "V√≠ ti·ªÅn" },
  { key: "gift", emoji: "üéÅ", name: "Qu√† t·∫∑ng" },
  { key: "file-text", emoji: "üìÑ", name: "H√≥a ƒë∆°n" },
  { key: "activity", emoji: "üè•", name: "Y t·∫ø" },
  { key: "book", emoji: "üìö", name: "Gi√°o d·ª•c" },
  { key: "trending-up", emoji: "üìà", name: "ƒê·∫ßu t∆∞" },
  { key: "home", emoji: "üè†", name: "Nh√† c·ª≠a" },
  { key: "heart", emoji: "‚ù§Ô∏è", name: "S·ª©c kh·ªèe" },
  { key: "smartphone", emoji: "üì±", name: "ƒêi·ªán tho·∫°i" },
  { key: "briefcase", emoji: "üíº", name: "C√¥ng vi·ªác" },
  { key: "credit-card", emoji: "üí≥", name: "Th·∫ª t√≠n d·ª•ng" },
  { key: "dollar-sign", emoji: "üí∞", name: "Ti·ªÅn m·∫∑t" },
  { key: "globe", emoji: "üåç", name: "Du l·ªãch" },
  { key: "map-pin", emoji: "üìç", name: "ƒê·ªãa ƒëi·ªÉm" },
  { key: "users", emoji: "üë•", name: "Gia ƒë√¨nh" },
  { key: "zap", emoji: "‚ö°", name: "ƒêi·ªán n∆∞·ªõc" },
  { key: "plus-circle", emoji: "‚ûï", name: "Kh√°c" },
]

const CategoryForm = ({ category = null, onSuccess, onCancel }) => {
  const { user } = useAuthStore()
  const { addCategory: addToStore, updateCategory: updateInStore } = useCategoryStore()
  const { showError, showSuccess } = useNotificationStore()

  const [formData, setFormData] = useState({
    name: "",
    type: "expense",
    icon: null, // B·∫Øt ƒë·∫ßu v·ªõi null thay v√¨ "coffee"
  })

  const [errors, setErrors] = useState({})
  const [isLoading, setIsLoading] = useState(false)

  // If editing, populate form with category data
  useEffect(() => {
    if (category) {
      setFormData({
        name: category.name || "",
        type: category.type || "expense",
        icon: category.icon || null, // C√≥ th·ªÉ l√† null
      })
    }
  }, [category])

  const validateForm = () => {
    const newErrors = {}

    // Validate name
    if (!formData.name.trim()) {
      newErrors.name = "T√™n danh m·ª•c l√† b·∫Øt bu·ªôc"
    } else if (formData.name.trim().length < 2) {
      newErrors.name = "T√™n danh m·ª•c ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±"
    } else if (formData.name.trim().length > 50) {
      newErrors.name = "T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±"
    }

    // Validate type
    if (!["income", "expense"].includes(formData.type)) {
      newErrors.type = "Vui l√≤ng ch·ªçn lo·∫°i danh m·ª•c"
    }

    // Icon is optional - no validation needed

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))

    // Clear error when user starts typing
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: "" }))
    }
  }

  const handleIconSelect = (iconKey) => {
    setFormData((prev) => ({
      ...prev,
      icon: prev.icon === iconKey ? null : iconKey, // Toggle: n·∫øu ƒë√£ ch·ªçn th√¨ b·ªè ch·ªçn
    }))
  }

  const handleSubmit = async (e) => {
    e.preventDefault()

    if (!validateForm()) {
      showError("Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin")
      return
    }

    // Check if user can edit this category
    if (category && category.isDefault) {
      showError("Kh√¥ng th·ªÉ ch·ªânh s·ª≠a danh m·ª•c m·∫∑c ƒë·ªãnh")
      return
    }

    setIsLoading(true)

    try {
      const categoryData = {
        ...formData,
        name: formData.name.trim(),
        // Icon will be included even if it's the default one
      }

      if (category) {
        // Update existing category
        const { error } = await updateCategory(category.id, categoryData, user.uid)

        if (error) {
          showError(`L·ªói c·∫≠p nh·∫≠t danh m·ª•c: ${error}`)
          return
        }

        // Update in local store
        updateInStore(category.id, { ...categoryData, id: category.id })
        showSuccess("ƒê√£ c·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng!")
      } else {
        // Add new category
        const { id, error } = await addCategory(categoryData, user.uid)

        if (error) {
          showError(`L·ªói t·∫°o danh m·ª•c: ${error}`)
          return
        }

        // Add to local store
        addToStore({ id, ...categoryData, userId: user.uid, isDefault: false })
        showSuccess("ƒê√£ t·∫°o danh m·ª•c th√†nh c√¥ng!")
      }

      // Call success callback
      if (onSuccess) {
        onSuccess()
      }
    } catch (err) {
      console.error("Category form error:", err)
      showError("ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën")
    } finally {
      setIsLoading(false)
    }
  }

  const handleCancel = () => {
    if (onCancel) {
      onCancel()
    }
  }

  // Error boundary fallback
  if (!user) {
    return (
      <div className="p-4 text-center">
        <p className="text-red-600">L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng</p>
        <Button onClick={handleCancel} variant="outline" className="mt-2">
          ƒê√≥ng
        </Button>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Category Name */}
        <div className="space-y-1">
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">
            <Tag size={16} className="inline mr-1" />
            T√™n danh m·ª•c <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            placeholder="VD: ƒÇn u·ªëng, L∆∞∆°ng, ƒê·∫ßu t∆∞..."
            className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
              errors.name ? "border-red-500" : "border-gray-300"
            }`}
            disabled={category?.isDefault}
          />
          {errors.name && <p className="text-sm text-red-600">{errors.name}</p>}
          {category?.isDefault && <p className="text-sm text-amber-600">Kh√¥ng th·ªÉ ch·ªânh s·ª≠a t√™n danh m·ª•c m·∫∑c ƒë·ªãnh</p>}
        </div>

        {/* Category Type */}
        <div className="space-y-3">
          <label className="block text-sm font-medium text-gray-700">
            Lo·∫°i danh m·ª•c <span className="text-red-500">*</span>
          </label>
          <div className="flex space-x-4">
            <label className="inline-flex items-center cursor-pointer">
              <input
                type="radio"
                name="type"
                value="expense"
                checked={formData.type === "expense"}
                onChange={handleChange}
                disabled={category?.isDefault}
                className="h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300"
              />
              <span className="ml-2 text-sm text-gray-700 flex items-center">
                <span className="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
                Chi ti√™u
              </span>
            </label>
            <label className="inline-flex items-center cursor-pointer">
              <input
                type="radio"
                name="type"
                value="income"
                checked={formData.type === "income"}
                onChange={handleChange}
                disabled={category?.isDefault}
                className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300"
              />
              <span className="ml-2 text-sm text-gray-700 flex items-center">
                <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                Thu nh·∫≠p
              </span>
            </label>
          </div>
          {category?.isDefault && <p className="text-sm text-amber-600">Kh√¥ng th·ªÉ thay ƒë·ªïi lo·∫°i danh m·ª•c m·∫∑c ƒë·ªãnh</p>}
        </div>

        {/* Icon Selection - Now Optional */}
        <div className="space-y-3">
          <label className="block text-sm font-medium text-gray-700">
            <Palette size={16} className="inline mr-1" />
            Bi·ªÉu t∆∞·ª£ng <span className="text-gray-400 text-xs">(t√πy ch·ªçn)</span>
          </label>
          <div className="grid grid-cols-6 gap-2 md:grid-cols-8 lg:grid-cols-10">
            {AVAILABLE_ICONS.map((icon) => (
              <button
                key={icon.key}
                type="button"
                title={icon.name}
                className={`p-3 rounded-lg border-2 flex items-center justify-center transition-all hover:scale-105 ${
                  formData.icon === icon.key
                    ? "border-blue-500 bg-blue-50 shadow-md"
                    : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                }`}
                onClick={() => handleIconSelect(icon.key)}
              >
                <span className="text-xl">{icon.emoji}</span>
              </button>
            ))}
          </div>
          <p className="text-xs text-gray-500">
            Ch·ªçn bi·ªÉu t∆∞·ª£ng ƒë·ªÉ d·ªÖ nh·∫≠n di·ªán danh m·ª•c. Click l·∫°i ƒë·ªÉ b·ªè ch·ªçn (kh√¥ng b·∫Øt bu·ªôc)
          </p>
        </div>

        {/* Preview */}
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
          <h4 className="text-sm font-medium text-gray-700 mb-2">Xem tr∆∞·ªõc:</h4>
          <div
            className={`inline-flex items-center px-3 py-2 rounded-lg border ${
              formData.type === "income"
                ? "bg-green-50 border-green-200 text-green-800"
                : "bg-red-50 border-red-200 text-red-800"
            }`}
          >
            {formData.icon && (
              <span className="text-lg mr-2">{AVAILABLE_ICONS.find((icon) => icon.key === formData.icon)?.emoji}</span>
            )}
            <span className="font-medium">{formData.name || "T√™n danh m·ª•c"}</span>
            <span
              className={`ml-2 text-xs px-2 py-1 rounded-full ${
                formData.type === "income" ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700"
              }`}
            >
              {formData.type === "income" ? "Thu nh·∫≠p" : "Chi ti√™u"}
            </span>
          </div>
          {!formData.icon && <p className="text-xs text-gray-500 mt-2">Kh√¥ng c√≥ bi·ªÉu t∆∞·ª£ng ƒë∆∞·ª£c ch·ªçn</p>}
        </div>

        {/* Action Buttons */}
        <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
          <Button type="button" variant="outline" onClick={handleCancel} disabled={isLoading}>
            H·ªßy
          </Button>
          <Button type="submit" variant="primary" disabled={isLoading} className="min-w-[100px]">
            {isLoading ? (
              <div className="flex items-center">
                <LoadingSpinner size="sm" className="mr-2" />
                {category ? "ƒêang c·∫≠p nh·∫≠t..." : "ƒêang t·∫°o..."}
              </div>
            ) : category ? (
              "C·∫≠p nh·∫≠t"
            ) : (
              "T·∫°o m·ªõi"
            )}
          </Button>
        </div>
      </form>
    </div>
  )
}

export default CategoryForm
